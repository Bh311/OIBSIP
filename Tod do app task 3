<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do App</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            width: 80%;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .add-task form {
            display: flex;
            flex-direction: column;
        }

        .add-task input[type="text"] {
            padding: 10px;
            margin-bottom: 10px;
            font-size: 1rem;
            border: 1px solid #ccc;
        }

        .add-task button {
            padding: 10px;
            font-size: 1rem;
            cursor: pointer;
            background-color: #007bff;
            color: #fff;
            border: none;
        }

        .add-task button:hover {
            background-color: #0056b3;
        }

        .task-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }

        .task-item .task-actions button {
            margin-left: 5px;
            padding: 5px;
            cursor: pointer;
            background-color: #dc3545;
            color: #fff;
            border: none;
        }

        .task-item .task-actions button:hover {
            background-color: #c82333;
        }

        .task-item.completed {
            text-decoration: line-through;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="pending-tasks">
            <h2>Pending Tasks</h2>
            <ul id="pending-tasks-list"></ul>
        </div>
        <div class="completed-tasks">
            <h2>Completed Tasks</h2>
            <ul id="completed-tasks-list"></ul>
        </div>
        <div class="add-task">
            <h2>Add New Task</h2>
            <form id="task-form">
                <input type="text" id="new-task" placeholder="Enter task...">
                <button type="submit">Add Task</button>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const taskForm = document.getElementById('task-form');
            const newTaskInput = document.getElementById('new-task');
            const pendingTasksList = document.getElementById('pending-tasks-list');
            const completedTasksList = document.getElementById('completed-tasks-list');

            taskForm.addEventListener('submit', function(event) {
                event.preventDefault();
                const taskText = newTaskInput.value.trim();
                if (taskText === '') return; // Prevent empty tasks

                const taskItem = createTaskItem(taskText);
                pendingTasksList.appendChild(taskItem);

                newTaskInput.value = ''; // Clear input field after adding task
            });

            function createTaskItem(taskText) {
                const li = document.createElement('li');
                li.textContent = taskText;
                li.classList.add('task-item');

                const actionsDiv = document.createElement('div');
                actionsDiv.classList.add('task-actions');

                const completeButton = document.createElement('button');
                completeButton.textContent = 'Complete';
                completeButton.classList.add('complete-btn');
                completeButton.addEventListener('click', function() {
                    li.classList.toggle('completed');
                    if (li.classList.contains('completed')) {
                        completedTasksList.appendChild(li);
                        completeButton.textContent = 'Undo';
                    } else {
                        pendingTasksList.appendChild(li);
                        completeButton.textContent = 'Complete';
                    }
                });
                actionsDiv.appendChild(completeButton);

                const editButton = document.createElement('button');
                editButton.textContent = 'Edit';
                editButton.classList.add('edit-btn');
                editButton.addEventListener('click', function() {
                    const newText = prompt('Edit task:', taskText);
                    if (newText !== null && newText.trim() !== '') {
                        taskText = newText.trim();
                        li.textContent = taskText;
                    }
                });
                actionsDiv.appendChild(editButton);

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.classList.add('delete-btn');
                deleteButton.addEventListener('click', function() {
                    li.remove();
                });
                actionsDiv.appendChild(deleteButton);

                li.appendChild(actionsDiv);

                return li;
            }
        });
    </script>
</body>
</html>
